#!/usr/bin/env python
'''
Created on Nov 13, 2010

@author: oblivion

'''
import optparse
import os.path
from boot_services.BootServices import BootServices

def read_service_file(filename, verbose):
    '''
    Read the file with the current service order 
    '''
    services = BootServices(verbose)
    try:
        if verbose:
            print("Reading service file: " + filename)
        #Figure out the path to the init scripts
        path = os.path.dirname(filename).replace("/etc/rc.d", "")
        #Read the file
        with open(filename) as conf_file:
            lines = conf_file.read().splitlines()
        get_service = False
        for line in lines:
            if line.find("#") == 0:
                if line.find("Name:") > -1:
                    name = line.strip("#")
                    name = name.replace("Name:", "")
                    name = name.strip()
                    get_service = True
            elif get_service:
                get_service = False
                services.add(name, path + line)
                if verbose:
                    print("Found service: " + name)
                name = ""
        return(services)
    except IOError as ex:
        raise ex

def write_service_file(path, services, verbose):
    '''
    Write the file with the current service order 
    '''
    #Header
    if verbose:
        print("Assembling service start file: " + path + "/start_services")
    lines = [ '#!/bin/sh\n',
             '# Services Startup Script\n',
             '# This file is generated by rc-update, please do not edit this by hand\n' ]
    for service in services.start_list:
        lines.append('\n')
        lines.append('#Name: ' + service.name + "\n")
        lines.append('/etc/init.d/' + service.name + "\n")
        if verbose:
            print("Adding service: " + service.name)

    if verbose:
        print("Writing service start file: " + path + "/start_services")
    with open(path + "/start_services", 'w') as conf_file:
        conf_file.writelines(lines)
    #Header
    if verbose:
        print("Assembling service stop file: " + path + "/stop_services")
    lines = [ '#!/bin/sh\n',
             '# Services Shutdown Script\n',
             '# This file is generated by rc-update, please do not edit this by hand\n' ]
    for service in services.stop_list:
        lines.append('\n')
        lines.append('#Name: ' + service.name + "\n")
        lines.append('/etc/init.d/' + service.name + "\n")
        if verbose:
            print("Adding service: " + service.name)

    if verbose:
        print("Writing service stop file: " + path + "/stop_services")
    with open(path + "/stop_services", 'w') as conf_file:
        conf_file.writelines(lines)

def add_service(service_name, config_dir, verbose):
    service_dir = config_dir + "/rc.d"
    print("Adding service: " + service_name)
    services = read_service_file(service_dir + "/start_services", verbose)
    if not services.get_service(service_name) == None:
        print("Service all ready added to boot sequence")
        return
    services.add(service_name, config_dir + "/init.d/" + service_name)
    write_service_file(service_dir, services, verbose)

def remove_service(service_name, service_dir, verbose):
    print("Removing service: " + service_name)
    link = service_dir + "/start/" + service_name
    if verbose:
        print("Removing " + link)
    os.remove(link)
    link = service_dir + "/stop/" + service_name
    if verbose:
        print("Removing " + link)
    os.remove(link)

def main():
    """Main functions"""
    usage = "usage: %prog [options] service"
    parser = optparse.OptionParser(usage = usage, version = "0.5")
    parser.add_option("-v", "--verbose",
                      action = "store_true", dest = "verbose", default = False,
                      help = "Print detailed information")
    parser.add_option("-a", "--add",
                      action = "store_true", help = "Add a boot service")
    parser.add_option("-r", "--remove",
                      action = "store_true", help = "Remove a boot service")
    parser.add_option("-d", "--dir",
                      action = "store", type = "string", dest = "dir",
                      default = "/etc",
                      help = "The root configuration folder (default: %default)")
    (options, args) = parser.parse_args()

    if not len(args) == 1:
        parser.print_help()
        return

    service_name = args[0]

    try:
        if options.add == True:
            add_service(service_name, options.dir, options.verbose)
        elif options.remove == True:
            remove_service(service_name, options.dir, options.verbose)
        else:
            parser.print_help()
            return
    except EnvironmentError as error:
        if error.filename == None:
            print(error.strerror)
        else:
            print(error.strerror + " accessing file: " + error.filename)

if __name__ == '__main__':
    main()
